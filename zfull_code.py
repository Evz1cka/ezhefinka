import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardRemove,

)
import asyncpg
from datetime import datetime, date, time, timedelta
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ExpenseStates(StatesGroup):
    waiting_for_expense_input = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞
    waiting_for_delete_id = State()  # –°–æ—Å—Ç–æ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    waiting_for_history_count = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    waiting_for_delete_confirmation = State()
    waiting_for_amount = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã

class ReminderStates(StatesGroup):
    waiting_for_reminder_time = State()
    waiting_for_reminder_text = State()

class BudgetStates(StatesGroup):
    waiting_for_budget_category = State()
    waiting_for_budget_amount = State()

@dp.callback_query(F.data == "settings")
async def settings_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders"),
        types.InlineKeyboardButton(text="üí∞ –ë—é–¥–∂–µ—Ç—ã", callback_data="budgets")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    await call.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

#region –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message(Command("debug"))
async def debug_cmd(message: types.Message):
    conn = await get_db_connection()
    try:
        data = await conn.fetch("SELECT * FROM expenses")
        await message.answer(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}\n–ü—Ä–∏–º–µ—Ä: {dict(data[0])}")
    finally:
        await conn.close()

@dp.message(Command("testdate"))
async def test_date(message: types.Message):
    conn = await get_db_connection()
    try:
        current = await conn.fetchval("SELECT CURRENT_DATE")
        week_ago = current - timedelta(days=7)
        month_start = current.replace(day=1)
        await message.answer(
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ –ë–î: {current}\n"
            f"–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥: {week_ago}\n"
            f"–ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞: {month_start}"
        )
    finally:
        await conn.close()
#endregion
#region –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_db_connection():
    return await asyncpg.connect(
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME"),
        host=os.getenv("DB_HOST")
    )

async def create_table():   # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    conn = await get_db_connection()
    try:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                category VARCHAR(50) NOT NULL,
                amount DECIMAL(10, 2) NOT NULL,
                currency VARCHAR(3) DEFAULT 'RUB',
                date DATE NOT NULL DEFAULT CURRENT_DATE,
                time TIME,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
    finally:
        await conn.close()
#endregion
#region –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥",
            callback_data="add_expense"
        ),
        types.InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="show_stats_menu"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data="delete_expense"
        ),
        types.InlineKeyboardButton(
            text="üìù –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤",
            callback_data="expenses_history"
        )
    )
    
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ï–∂–µ—Ñ–∏–Ω–∫–∞ üçá</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.delete()
    except:
        pass
    await start(call.message, state)
    await call.answer()

@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_main(message: types.Message, state: FSMContext):
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"))
    builder.add(types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.add(types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"))
    builder.add(types.KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await start(message, state)
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# 6. –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏
@dp.callback_query(F.data == "show_help")
async def show_help(call: CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>\n"
        "–§–æ—Ä–º–∞—Ç: <code>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –°—É–º–º–∞ [–î–∞—Ç–∞] [–í—Ä–µ–º—è]</code>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "<code>–¢–∞–∫—Å–∏ 350</code>\n"
        "<code>–ï–¥–∞ 500 15.07</code>\n"
        "<code>–ö–∏–Ω–æ 800 15.07 20:30</code>\n\n"
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        "<b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await call.message.edit_text(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

#endregion
#region –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
'''
@dp.callback_query(F.data == "add_expense") # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
async def add_expense_callback(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await add_expense_start(call.message, state)
'''
@dp.callback_query(F.data == "add_expense")
async def add_expense_callback(call: CallbackQuery, state: FSMContext):
    await call.answer()
    
    builder = InlineKeyboardBuilder()
    categories = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ñ–∏–ª—å–µ", "–î—Ä—É–≥–æ–µ"]
    for category in categories:
        builder.button(text=category, callback_data=f"quick_cat_{category}")
    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_input")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(2, 2, 1)
    
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=builder.as_markup()
    )

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
async def add_expense_start(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "*–∫–∞—Ç–µ–≥–æ—Ä–∏—è* *—Å—É–º–º–∞* [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è]\n"
        "–ü—Ä–∏–º–µ—Ä:\n`–¢–∞–∫—Å–∏ 300`\n`–ï–¥–∞ 500 20.05`\n`–ö–∏–Ω–æ 800 20.05 19:30`",
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ExpenseStates.waiting_for_expense_input)

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞—Å—Ö–æ–¥")
async def add_another_expense(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ —Å —Ç–µ–∫—É—â–∏–º state
    await add_expense_start(message, state)

@dp.message(ExpenseStates.waiting_for_expense_input) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞
async def process_expense(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ "–ù–∞–∑–∞–¥" - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_main(message, state)
        return
        
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞...
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Å—É–º–º—É")
        return
    
    try:
        category = parts[0]
        amount = float(parts[1].replace(',', '.'))
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        date_obj = datetime.utcnow().date()
        time_obj = None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã (—Ñ–æ—Ä–º–∞—Ç—ã: 18.05 –∏–ª–∏ 18.05.2025)
        if len(parts) >= 3 and '.' in parts[2]:
            date_parts = parts[2].split('.')
            day = int(date_parts[0])
            month = int(date_parts[1])
            year = int(date_parts[2]) if len(date_parts) > 2 else datetime.now().year
            date_obj = datetime(year, month, day).date()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç: 8:52)
        if len(parts) >= 4 and ':' in parts[3]:
            time_obj = datetime.strptime(parts[3], '%H:%M').time()

        conn = await get_db_connection()
        try:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–µ—Ä–µ–¥–∞–µ–º NULL
            if time_obj is None:
                await conn.execute(
                    "INSERT INTO expenses (user_id, category, amount, date) "
                    "VALUES ($1, $2, $3, $4)",
                    message.from_user.id,
                    category,
                    amount,
                    date_obj
                )
            else:
                await conn.execute(
                    "INSERT INTO expenses (user_id, category, amount, date, time) "
                    "VALUES ($1, $2, $3, $4, $5)",
                    message.from_user.id,
                    category,
                    amount,
                    date_obj,
                    time_obj
                )
            
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {category} - {amount:.2f} ‚ÇΩ")
            
            # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞—Å—Ö–æ–¥"))
            builder.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
            
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ä–∞—Å—Ö–æ–¥?",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            
        except asyncpg.PostgresError as e:
            logger.error(f"Database error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        finally:
            await conn.close()
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã
#endregion
#region –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
'''
@dp.callback_query(F.data == "show_stats_menu")
async def show_stats_callback(call: CallbackQuery):
    await call.answer()
    await show_stats(call.message)
'''
@dp.callback_query(F.data == "show_stats_menu")
async def show_stats_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="stats_period"),
        types.InlineKeyboardButton(text="üè∑ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="stats_categories")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="stats_graphs"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    await call.message.edit_text(
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def show_stats(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è"))
    builder.add(types.KeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é"))
    builder.add(types.KeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü"))
    builder.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

@dp.message(lambda message: message.text in ["–ó–∞ —Å–µ–≥–æ–¥–Ω—è", "–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ –º–µ—Å—è—Ü"]) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def handle_stats_period(message: types.Message):
    user_id = message.from_user.id
    period = message.text

    conn = None
    try:
        conn = await get_db_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ –ë–î
        db_now = await conn.fetchval("SELECT NOW()")
        current_date = db_now.date()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if period == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            date_condition = "date = $2::date"
            params = [user_id, current_date]
            title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
            period_info = f"{current_date.strftime('%d.%m.%Y')}"
        elif period == "–ó–∞ –Ω–µ–¥–µ–ª—é":
            week_start = current_date - timedelta(days=6)
            date_condition = "date BETWEEN $2 AND $3"
            params = [user_id, week_start, current_date]
            title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"
            period_info = f"{week_start.strftime('%d.%m.%Y')} - {current_date.strftime('%d.%m.%Y')}"
        else:  # –ó–∞ –º–µ—Å—è—Ü
            month_start = current_date.replace(day=1)
            date_condition = "date BETWEEN $2 AND $3"
            params = [user_id, month_start, current_date]
            title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"
            period_info = f"{month_start.strftime('%d.%m.%Y')} - {current_date.strftime('%d.%m.%Y')}"
        
        # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        total = await conn.fetchval(
            f"SELECT COALESCE(SUM(amount), 0) FROM expenses "
            f"WHERE user_id = $1 AND {date_condition}",
            *params
        )
        
        stats = await conn.fetch(
            f"SELECT category, COALESCE(SUM(amount), 0) as sum FROM expenses "
            f"WHERE user_id = $1 AND {date_condition} "
            f"GROUP BY category ORDER BY sum DESC",
            *params
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"{title}\n"
            f"–ü–µ—Ä–∏–æ–¥: {period_info}\n"
            f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {float(total):.2f} ‚ÇΩ\n\n"
        )

        if stats:
            for i, row in enumerate(stats, 1):
                response += f"{i}. {row['category']}: {row['sum']:.2f} ‚ÇΩ\n"
        else:
            response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    finally:
        if conn:
            await conn.close()
#endregion
#region –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤  
@dp.callback_query(F.data == "delete_expense") # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
async def delete_expense_callback(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await delete_expense_start(call.message, state)

@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def delete_expense_start(message: types.Message, state: FSMContext):
    conn = await get_db_connection()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expenses = await conn.fetch(
            "SELECT id, category, amount, date FROM expenses "
            "WHERE user_id = $1 ORDER BY created_at DESC LIMIT 5",
            message.from_user.id
        )
        
        if not expenses:
            await message.answer("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        expenses_list = "\n".join(
            [f"{e['id']}: {e['category']} {e['amount']} ‚ÇΩ ({e['date']})" 
             for e in expenses]
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))
        await message.answer(
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (—É–∫–∞–∂–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):\n{expenses_list}\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(ExpenseStates.waiting_for_delete_id)
        
    finally:
        await conn.close()
    
@dp.message(ExpenseStates.waiting_for_delete_id)
async def process_delete_expense(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await start(message, state)
        return
    
    try:
        expense_id = int(message.text)
        conn = await get_db_connection()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            expense = await conn.fetchrow(
                "SELECT category, amount, date FROM expenses WHERE id = $1 AND user_id = $2",
                expense_id, message.from_user.id
            )
            
            if not expense:
                await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
                await state.clear()
                await start(message, state)
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(expense_id=expense_id)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            builder = ReplyKeyboardBuilder()
            builder.add(types.KeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å"))
            builder.add(types.KeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"))
            
            await message.answer(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n"
                f"{expense['category']} {expense['amount']} ‚ÇΩ ({expense['date']})",
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            await state.set_state(ExpenseStates.waiting_for_delete_confirmation)
            
        finally:
            await conn.close()
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ (—á–∏—Å–ª–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")

@dp.message(ExpenseStates.waiting_for_delete_confirmation) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def confirm_delete_expense(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–Ω–µ—Ç", "–æ—Ç–º–µ–Ω–∏—Ç—å", "–Ω–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await start(message, state)
        return
        
    if message.text.lower() in ["–¥–∞", "—É–¥–∞–ª–∏—Ç—å", "–¥–∞, —É–¥–∞–ª–∏—Ç—å"]:
        data = await state.get_data()
        expense_id = data.get('expense_id')
        
        if not expense_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø–∏—Å–∏")
            await state.clear()
            await start(message, state)
            return
            
        conn = await get_db_connection()
        try:
            deleted = await conn.execute(
                "DELETE FROM expenses WHERE id = $1 AND user_id = $2",
                expense_id, message.from_user.id
            )
            
            if deleted[-1] == '0':
                await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                
        finally:
            await conn.close()
            
        await state.clear()
        await start(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞, —É–¥–∞–ª–∏—Ç—å' –∏–ª–∏ '–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å'")
#endregion
#region –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
EXPENSES_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
'''
@dp.callback_query(F.data == "expenses_history") # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
async def expenses_history_callback(call: CallbackQuery):
    await call.answer()
    await show_expenses_page(call.message, call.from_user.id, 1)
'''
@dp.callback_query(F.data == "expenses_history")
async def expenses_history_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="expenses_recent"),
        types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="expenses_search")
    )
    builder.row(
        types.InlineKeyboardButton(text="üóÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="expenses_by_category"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    await call.message.edit_text(
        "üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.message(lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤") # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"
async def show_history_start(message: types.Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_expenses_page(message, message.from_user.id, 1)

async def show_expenses_page(message: types.Message, user_id: int, page: int):
    conn = await get_db_connection()
    try:
        total_expenses = await conn.fetchval(
            "SELECT COUNT(*) FROM expenses WHERE user_id = $1",
            user_id
        ) or 0
        
        total_pages = max((total_expenses - 1) // EXPENSES_PER_PAGE + 1, 1)
        
        expenses = await conn.fetch(
            "SELECT id, category, amount, date, time FROM expenses "
            "WHERE user_id = $1 "
            "ORDER BY date DESC, time DESC NULLS LAST, created_at DESC "
            "LIMIT $2 OFFSET $3",
            user_id,
            EXPENSES_PER_PAGE,
            (page - 1) * EXPENSES_PER_PAGE
        )
        
        if not expenses:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return
            
        text = (
            f"üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{total_expenses}</b>\n\n"
        )
        
        for i, expense in enumerate(expenses, 1):
            date_str = expense['date'].strftime('%d.%m.%Y')
            time_str = f" {expense['time'].strftime('%H:%M')}" if expense['time'] else ""
            text += (
                f"<b>#{i + (page-1)*EXPENSES_PER_PAGE}</b> | üÜî <code>{expense['id']}</code>\n"
                f"üìÖ <b>{date_str}{time_str}</b>\n"
                f"üè∑ {expense['category']}: <b>{expense['amount']:.2f} ‚ÇΩ</b>\n\n"
            )
        
        builder = InlineKeyboardBuilder()
        
        if page > 1:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expenses_page_{page-1}")
        if page < total_pages:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"expenses_page_{page+1}")
        
        builder.button(text="üîô –í –º–µ–Ω—é", callback_data="expenses_back")
        builder.adjust(2)
        
        if page == 1:
            await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())
        else:
            await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")
    finally:
        if conn:
            await conn.close()

@dp.callback_query(F.data.startswith("expenses_page_")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def paginate_expenses(call: CallbackQuery):
    page = int(call.data.split("_")[-1])
    await show_expenses_page(call.message, call.from_user.id, page)
    await call.answer()

@dp.callback_query(F.data == "expenses_back") # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
async def back_to_menu(call: CallbackQuery):
    await call.message.delete()
    await start(call.message, call.bot)
    await call.answer()
#endregion
#region –ë—é–¥–∂–µ—Ç—ã
@dp.callback_query(F.data == "budgets")
async def budgets_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—é–¥–∂–µ—Ç", callback_data="set_budget"),
        types.InlineKeyboardButton(text="üìä –¢–µ–∫—É—â–∏–µ –±—é–¥–∂–µ—Ç—ã", callback_data="view_budgets")
    )
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")
    )
    
    await call.message.edit_text(
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞–º–∏</b>\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )
#endregion
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data == "add_expense")
async def handle_add_expense(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await add_expense_start(call.message, state)

@dp.callback_query(F.data == "show_stats_menu")
async def handle_show_stats(call: CallbackQuery):
    await call.answer()
    await show_stats_menu(call)

@dp.callback_query(F.data == "expenses_history")
async def handle_expenses_history(call: CallbackQuery):
    await call.answer()
    await expenses_history_menu(call)

@dp.callback_query(F.data == "settings")
async def handle_settings(call: CallbackQuery):
    await call.answer()
    await settings_menu(call)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(F.data == "stats_period")
async def handle_stats_period(call: CallbackQuery):
    await call.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º

@dp.callback_query(F.data == "stats_categories")
async def handle_stats_categories(call: CallbackQuery):
    await call.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

@dp.callback_query(F.data == "stats_graphs")
async def handle_stats_graphs(call: CallbackQuery):
    await call.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏
@dp.callback_query(F.data == "expenses_recent")
async def handle_expenses_recent(call: CallbackQuery):
    await call.answer()
    await show_expenses_page(call.message, call.from_user.id, 1)

@dp.callback_query(F.data == "expenses_search")
async def handle_expenses_search(call: CallbackQuery):
    await call.answer("–†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞

@dp.callback_query(F.data == "expenses_by_category")
async def handle_expenses_by_category(call: CallbackQuery):
    await call.answer("–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(F.data == "reminders")
async def handle_reminders(call: CallbackQuery):
    await call.answer("–†–µ–∞–ª–∏–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

@dp.callback_query(F.data == "budgets")
async def handle_budgets(call: CallbackQuery):
    await call.answer()
    await budgets_menu(call)

@dp.callback_query(F.data == "categories")
async def handle_categories(call: CallbackQuery):
    await call.answer("–†–µ–∞–ª–∏–∑—É–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±—é–¥–∂–µ—Ç–æ–≤
@dp.callback_query(F.data == "set_budget")
async def handle_set_budget(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞:")
    await state.set_state(BudgetStates.waiting_for_category)

@dp.callback_query(F.data == "view_budgets")
async def handle_view_budgets(call: CallbackQuery):
    await call.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±—é–¥–∂–µ—Ç—ã")
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ–∫–∞–∑–∞ –±—é–¥–∂–µ—Ç–æ–≤
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query(F.data.startswith("quick_cat_"))
async def handle_quick_category(call: CallbackQuery, state: FSMContext):
    category = call.data.replace("quick_cat_", "")
    await state.update_data(category=category)
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(ExpenseStates.waiting_for_amount)
    await call.answer()

@dp.callback_query(F.data == "manual_input")
async def handle_manual_input(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –°—É–º–º–∞ [–î–∞—Ç–∞] [–í—Ä–µ–º—è]\n"
        "–ü—Ä–∏–º–µ—Ä: –¢–∞–∫—Å–∏ 350 15.07 18:30",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(ExpenseStates.waiting_for_expense_input)
@dp.message(ExpenseStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        data = await state.get_data()
        category = data.get('category', '–î—Ä—É–≥–æ–µ')
        
        conn = await get_db_connection()
        try:
            await conn.execute(
                "INSERT INTO expenses (user_id, category, amount) VALUES ($1, $2, $3)",
                message.from_user.id, category, amount
            )
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {category} - {amount:.2f} ‚ÇΩ")
        finally:
            await conn.close()
            
        await state.clear()
        await start(message, state)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@dp.callback_query(F.data == "settings_back")
async def handle_settings_back(call: CallbackQuery):
    await call.answer()
    await start(call.message, call.bot)

@dp.callback_query()
async def unknown_callback(call: CallbackQuery):
    await call.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
    logger.warning(f"Unknown callback data: {call.data}")
#region –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await create_table()
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
#endregion