from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    CallbackQuery)

import asyncpg

from db.db_main import get_pool
from init import logging

user_router = Router()

async def get_or_create_user(user: types.User):
    db_pool = get_pool()
    if not db_pool:
        logging.error("‚ùå –û—à–∏–±–∫–∞: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (pool is None)")
        return

    try:
        exists = await db_pool.fetchval(
            "SELECT 1 FROM users WHERE user_id = $1",
            user.id
        )
        
        if not exists:
            await db_pool.execute(
                "INSERT INTO users (user_id, username, first_name, last_name) "
                "VALUES ($1, $2, $3, $4)",
                user.id,
                user.username[:100] if user.username else None,
                user.first_name[:100] if user.first_name else None,
                user.last_name[:100] if user.last_name else None
            )
            logging.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        
        await db_pool.execute(
            "UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE user_id = $1",
            user.id
        )
    except asyncpg.PostgresError as db_err:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}: {db_err}")
    except Exception as e:
        logging.exception(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

@user_router.callback_query(F.data == "profile")
async def show_profile_callback(call: CallbackQuery):
    await view_profile(call)
    await call.answer()

@user_router.message(Command("profile"))
async def show_profile_message(message: Message):
    await view_profile(message)


async def view_profile(event):
    db_pool = get_pool()
    try:
        user_id = event.from_user.id

        user_data = await db_pool.fetchrow(
            "SELECT username, first_name, last_name, join_date, last_active "
            "FROM users WHERE user_id = $1",
            user_id
        )
        if not user_data:
            await event.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")  # –∏ message.answer, –∏ call.answer –µ—Å—Ç—å
            return

        stats = await db_pool.fetchrow(
            "SELECT COUNT(*) as total_expenses, SUM(amount) as total_amount "
            "FROM expenses WHERE user_id = $1",
            user_id
        )
        first_name = user_data['first_name'] or ''
        last_name = user_data['last_name'] or ''
        username = f"@{user_data['username']}" if user_data['username'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        total_amount = stats['total_amount'] or 0

        text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"‚îú –ò–º—è: {first_name} {last_name}\n"
            f"‚îú –Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
            f"‚îú –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['join_date'].strftime('%d.%m.%Y')}\n"
            f"‚îú –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['last_active'].strftime('%d.%m.%Y %H:%M')}\n"
            f"‚ï∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"  ‚îî –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {stats['total_expenses']}\n"
            f"  ‚îî –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} ‚ÇΩ"
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )

        # —É Message –µ—Å—Ç—å –º–µ—Ç–æ–¥ answer, —É CallbackQuery —Ç–æ–∂–µ, –Ω–æ –¥–ª—è call –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å call.message.answer()
        if isinstance(event, CallbackQuery):
            await event.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())
        else:
            await event.answer(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await event.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")