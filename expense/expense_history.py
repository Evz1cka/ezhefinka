import os
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardRemove,

)

import asyncpg  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö 
from init import logging  # —Ç–≤–æ–π –º–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–æ–≤
from db.db_main import get_pool  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
expense_history_router = Router()

EXPENSES_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ


@expense_history_router.callback_query(F.data == "expenses_history")
async def expenses_history_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="expenses_recent"),
        types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="expenses_search")
    )
    builder.row(
        types.InlineKeyboardButton(text="üóÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="expenses_by_category"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    await call.message.edit_text(
        "üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@expense_history_router.callback_query(F.data == "expenses_search") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def search_expenses(callback: CallbackQuery):
    await callback.answer("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@expense_history_router.callback_query(F.data == "expenses_by_category") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def expenses_hystory_categories(callback: CallbackQuery):
    await callback.answer("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@expense_history_router.callback_query(F.data == "expenses_recent")
async def show_history_start(call: CallbackQuery):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_expenses_page(call.message, call.from_user.id, 1)
    await call.answer()  # –¥–æ–±–∞–≤–∏–º call.answer() —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"


async def show_expenses_page(message: types.Message, user_id: int, page: int):
    pool = get_pool()
    try:
        total_expenses = await pool.fetchval(
            "SELECT COUNT(*) FROM expenses WHERE user_id = $1",
            user_id
        ) or 0
        
        total_pages = max((total_expenses - 1) // EXPENSES_PER_PAGE + 1, 1)
        
        expenses = await pool.fetch(
            "SELECT id, category, amount, date, time FROM expenses "
            "WHERE user_id = $1 "
            "ORDER BY date DESC, (time IS NULL), time DESC, created_at DESC "
            "LIMIT $2 OFFSET $3",
            user_id,
            EXPENSES_PER_PAGE,
            (page - 1) * EXPENSES_PER_PAGE
        )

        
        if not expenses:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return
            
        text = (
            f"üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{total_expenses}</b>\n\n"
        )
        
        for i, expense in enumerate(expenses, 1):
            date_str = expense['date'].strftime('%d.%m.%Y')
            time_str = f" {expense['time'].strftime('%H:%M')}" if expense['time'] else ""
            text += (
                f"<b>#{i + (page-1)*EXPENSES_PER_PAGE}</b> | üÜî <code>{expense['id']}</code>\n"
                f"üìÖ <b>{date_str}{time_str}</b>\n"
                f"üè∑ {expense['category']}: <b>{expense['amount']:.2f} ‚ÇΩ</b>\n\n"
            )
        
        builder = InlineKeyboardBuilder()
        
        if page > 1:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expenses_page_{page-1}")
        if page < total_pages:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"expenses_page_{page+1}")
        
        builder.button(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2)
        
        await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")
    

@expense_history_router.callback_query(F.data.startswith("expenses_page_")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def paginate_expenses(call: CallbackQuery):
    page = int(call.data.split("_")[-1])
    await show_expenses_page(call.message, call.from_user.id, page)
    await call.answer()