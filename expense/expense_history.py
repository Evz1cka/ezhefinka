import os

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardRemove,

)
from datetime import timedelta, date, datetime
import asyncpg  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö 
from init import logging  # —Ç–≤–æ–π –º–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–æ–≤
from db.db_main import get_pool  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
expense_history_router = Router()

EXPENSES_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

class SearchExpenses(StatesGroup):
    waiting_for_query = State()
class PeriodHistory(StatesGroup):
    waiting_for_custom_period = State()

@expense_history_router.callback_query(F.data == "expenses_by_period")
async def expenses_by_period_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="history_period_today"),
        types.InlineKeyboardButton(text="üóì –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="history_period_week")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìÜ –ó–∞ –º–µ—Å—è—Ü", callback_data="history_period_month"),
        types.InlineKeyboardButton(text="‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å —Å–≤–æ–π", callback_data="history_period_custom")
    )
    builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="expenses_history"))
    
    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@expense_history_router.callback_query(F.data.startswith("history_period_"))
async def show_period_expenses(callback: CallbackQuery):
    user_id = callback.from_user.id
    today = date.today()
    
    if callback.data == "history_period_today":
        start_date = end_date = today
    elif callback.data == "history_period_week":
        start_date = today - timedelta(days=7)
        end_date = today
    elif callback.data == "history_period_month":
        start_date = today.replace(day=1)
        end_date = today
    elif callback.data == "history_period_custom":
        await callback.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>13.11.2024 - 22.05</code>",
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        return await callback.bot.fsm.set_state(callback.from_user.id, PeriodHistory.waiting_for_custom_period)

    await show_expenses_in_period(callback.message, user_id, start_date, end_date)
    await callback.answer()

@expense_history_router.message(PeriodHistory.waiting_for_custom_period)
async def handle_custom_period(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        parts = message.text.strip().split("-")
        start_str = parts[0].strip()
        end_str = parts[1].strip()

        start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
        end_date = datetime.strptime(end_str + f".{start_date.year}", "%d.%m.%Y").date()

        if end_date < start_date:
            raise ValueError("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.")

        await show_expenses_in_period(message, user_id, start_date, end_date)
        await state.clear()

    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<code>13.11.2024 - 22.05</code>",
                             parse_mode=ParseMode.HTML)


async def show_expenses_in_period(message: types.Message, user_id: int, start_date: date, end_date: date):
    pool = get_pool()
    try:
        expenses = await pool.fetch(
            "SELECT id, category, amount, date, time FROM expenses "
            "WHERE user_id = $1 AND date BETWEEN $2 AND $3 "
            "ORDER BY date DESC, (time IS NULL), time DESC, created_at DESC",
            user_id, start_date, end_date
        )

        if not expenses:
            await message.answer("üì≠ –ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")
            return

        text = (
            f"üìÖ <b>–†–∞—Å—Ö–æ–¥—ã —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}</b>\n"
            f"üìä –í—Å–µ–≥–æ: <b>{len(expenses)}</b>\n\n"
        )

        for i, expense in enumerate(expenses, 1):
            date_str = expense['date'].strftime('%d.%m.%Y')
            time_str = f" {expense['time'].strftime('%H:%M')}" if expense['time'] else ""
            text += (
                f"<b>#{i}</b> | üÜî <code>{expense['id']}</code>\n"
                f"üìÖ <b>{date_str}{time_str}</b>\n"
                f"üè∑ {expense['category']}: <b>{expense['amount']:.2f} ‚ÇΩ</b>\n\n"
            )

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="expenses_by_period")
        builder.button(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2)

        await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")


@expense_history_router.callback_query(F.data == "expenses_history")
async def expenses_history_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="expenses_recent"),
        types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="expenses_search")
    ) 

    builder.row(
        types.InlineKeyboardButton(text="üóÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="expenses_by_category"),
        types.InlineKeyboardButton(text="üìÜ –ü–æ –ø–µ—Ä–∏–æ–¥—É", callback_data="expenses_by_period"),
    )
    
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu") 
    )
    await call.message.edit_text(
        "üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@expense_history_router.callback_query(F.data == "expenses_search")
async def start_search_expenses(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n"
        "–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –¥–∞—Ç–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –ø–æ —Å—É–º–º–µ."
    )
    await state.set_state(SearchExpenses.waiting_for_query)
    await callback.answer()

@expense_history_router.message(SearchExpenses.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext):
    query = message.text.strip()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∑–∞–ø—Ä–æ—Å –∏ —Å–±—Ä–æ—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ 1
    await state.update_data(search_query=query, page=1)

    await show_search_results(message, user_id, query, 1)

    await state.clear()  # –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –∏–Ω–∞—á–µ –Ω–µ –æ—á–∏—â–∞—Ç—å

async def show_search_results(message: Message, user_id: int, query: str, page: int):
    pool = get_pool()

    try:

        params = [user_id]
        conditions = ["user_id = $1"]
        idx = 2

        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        date_filter = None
        try:
            date_filter = datetime.strptime(query, "%d.%m.%Y").date()
        except:
            pass

        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É
        amount_filter = None
        try:
            amount_filter = float(query.replace(",", "."))
        except:
            pass

        or_conditions = []
        if date_filter:
            or_conditions.append(f"date = ${idx}")
            params.append(date_filter)
            idx += 1

        if amount_filter is not None:
            or_conditions.append(f"(amount >= ${idx} AND amount < ${idx + 1})")
            params.append(amount_filter)
            params.append(amount_filter + 1)
            idx += 2

        or_conditions.append(f"category ILIKE ${idx}")
        params.append(f"%{query}%")
        idx += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Å OR
        or_sql = " OR ".join(or_conditions)

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π WHERE
        where_sql = " AND ".join(conditions + [f"({or_sql})"])

        # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        count_sql = f"SELECT COUNT(*) FROM expenses WHERE {where_sql}"
        total_expenses = await pool.fetchval(count_sql, *params)

        if total_expenses == 0:
            await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        total_pages = max((total_expenses - 1) // EXPENSES_PER_PAGE + 1, 1)
        offset = (page - 1) * EXPENSES_PER_PAGE

        query_sql = (
            f"SELECT id, category, amount, date, time FROM expenses "
            f"WHERE {where_sql} "
            f"ORDER BY date DESC, (time IS NULL), time DESC, created_at DESC "
            f"LIMIT {EXPENSES_PER_PAGE} OFFSET {offset}"
        )

        expenses = await pool.fetch(query_sql, *params)

        text = (
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n"
            f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: <b>{total_expenses}</b>\n\n"
        )

        for i, expense in enumerate(expenses, 1):
            date_str = expense['date'].strftime('%d.%m.%Y')
            time_str = f" {expense['time'].strftime('%H:%M')}" if expense['time'] else ""
            text += (
                f"<b>#{i + (page-1)*EXPENSES_PER_PAGE}</b> | üÜî <code>{expense['id']}</code>\n"
                f"üìÖ <b>{date_str}{time_str}</b>\n"
                f"üè∑ {expense['category']}: <b>{expense['amount']:.2f} ‚ÇΩ</b>\n\n"
            )

        builder = InlineKeyboardBuilder()
        if page > 1:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_expenses_page_{page-1}_{query}")
        if page < total_pages:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"search_expenses_page_{page+1}_{query}")
        builder.button(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2)

        await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤.")


@expense_history_router.callback_query(F.data.startswith("search_expenses_page_"))
async def paginate_search_expenses(call: CallbackQuery):
    # –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∞: search_expenses_page_{page}_{query}
    try:
        _, _, page_str, *query_parts = call.data.split("_")
        page = int(page_str)
        query = "_".join(query_parts)  # —Ç.–∫. query –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å _
        user_id = call.from_user.id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await show_search_results(call.message, user_id, query, page)
        await call.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞.")

@expense_history_router.callback_query(F.data == "expenses_by_category")
async def expenses_history_categories(callback: CallbackQuery):
    user_id = callback.from_user.id
    pool = get_pool()
    
    try:
        categories = await pool.fetch(
            "SELECT DISTINCT category FROM expenses WHERE user_id = $1 ORDER BY category",
            user_id
        )
        
        if not categories:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return

        builder = InlineKeyboardBuilder()
        for cat in categories:
            builder.button(
                text=cat['category'],
                callback_data=f"category_page_{cat['category']}_1"
            )
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="expenses_history")
        builder.adjust(2,1)

        await callback.message.edit_text(
            "üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>:",
            parse_mode=ParseMode.HTML,
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

async def show_category_expenses_page(message: types.Message, user_id: int, category: str, page: int):
    pool = get_pool()
    
    try:
        total_expenses = await pool.fetchval(
            "SELECT COUNT(*) FROM expenses WHERE user_id = $1 AND category = $2",
            user_id, category
        ) or 0

        if total_expenses == 0:
            await message.edit_text(f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.", parse_mode=ParseMode.HTML)
            return

        total_pages = max((total_expenses - 1) // EXPENSES_PER_PAGE + 1, 1)
        offset = (page - 1) * EXPENSES_PER_PAGE

        expenses = await pool.fetch(
            "SELECT id, amount, date, time FROM expenses "
            "WHERE user_id = $1 AND category = $2 "
            "ORDER BY date DESC, (time IS NULL), time DESC, created_at DESC "
            "LIMIT $3 OFFSET $4",
            user_id, category, EXPENSES_PER_PAGE, offset
        )

        text = (
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <i>{category}</i>\n"
            f"üìù –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{total_expenses}</b>\n\n"
        )

        for i, expense in enumerate(expenses, 1):
            date_str = expense['date'].strftime('%d.%m.%Y')
            time_str = f" {expense['time'].strftime('%H:%M')}" if expense['time'] else ""
            text += (
                f"<b>#{i + (page-1)*EXPENSES_PER_PAGE}</b> | üÜî <code>{expense['id']}</code>\n"
                f"üìÖ <b>{date_str}{time_str}</b>\n"
                f"üí∞ <b>{expense['amount']:.2f} ‚ÇΩ</b>\n\n"
            )

        builder = InlineKeyboardBuilder()
        if page > 1:
            builder.button(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"category_page_{category}_{page - 1}"
            )
        if page < total_pages:
            builder.button(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"category_page_{category}_{page + 1}"
            )
        builder.button(text="üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="expenses_by_category")
        builder.button(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2)

        await message.edit_text(
            text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

@expense_history_router.callback_query(F.data.startswith("category_page_"))
async def paginate_category_expenses(callback: CallbackQuery):
    try:
        # category_page_{category}_{page}
        parts = callback.data.split("_")
        category = "_".join(parts[2:-1])  # –ß—Ç–æ–±—ã —É—á–µ—Å—Ç—å _ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        page = int(parts[-1])
        user_id = callback.from_user.id

        await show_category_expenses_page(callback.message, user_id, category, page)
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

@expense_history_router.callback_query(F.data.startswith("category_history_"))
async def show_expenses_by_category(callback: CallbackQuery):
    data_parts = callback.data.split("category_history_")
    if len(data_parts) < 2:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.", show_alert=True)
        return

    category = data_parts[1]
    user_id = callback.from_user.id
    pool = get_pool()

    try:
        expenses = await pool.fetch(
            "SELECT id, amount, date, time FROM expenses "
            "WHERE user_id = $1 AND category = $2 "
            "ORDER BY date DESC, (time IS NULL), time DESC, created_at DESC",
            user_id,
            category
        )

        if not expenses:
            await callback.message.edit_text(f"üì≠ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>.", parse_mode=ParseMode.HTML)
            return

        text = f"üìÇ <b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b> <i>{category}</i>:\n\n"

        for i, expense in enumerate(expenses, 1):
            date_str = expense['date'].strftime('%d.%m.%Y')
            time_str = f" {expense['time'].strftime('%H:%M')}" if expense['time'] else ""
            text += (
                f"<b>#{i}</b> | üÜî <code>{expense['id']}</code>\n"
                f"üìÖ <b>{date_str}{time_str}</b>\n"
                f"üí∞ <b>{expense['amount']:.2f} ‚ÇΩ</b>\n\n"
            )

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="expenses_by_category")
        builder.button(text="üè† –í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)

        await callback.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


@expense_history_router.callback_query(F.data == "expenses_recent")
async def show_history_start(call: CallbackQuery):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_expenses_page(call.message, call.from_user.id, 1)
    await call.answer()  # –¥–æ–±–∞–≤–∏–º call.answer() —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"


async def show_expenses_page(message: types.Message, user_id: int, page: int):
    pool = get_pool()
    try:
        total_expenses = await pool.fetchval(
            "SELECT COUNT(*) FROM expenses WHERE user_id = $1",
            user_id
        ) or 0
        
        total_pages = max((total_expenses - 1) // EXPENSES_PER_PAGE + 1, 1)
        
        expenses = await pool.fetch(
            "SELECT id, category, amount, date, time FROM expenses "
            "WHERE user_id = $1 "
            "ORDER BY date DESC, (time IS NULL), time DESC, created_at DESC "
            "LIMIT $2 OFFSET $3",
            user_id,
            EXPENSES_PER_PAGE,
            (page - 1) * EXPENSES_PER_PAGE
        )

        
        if not expenses:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return
            
        text = (
            f"üìù <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{total_expenses}</b>\n\n"
        )
        
        for i, expense in enumerate(expenses, 1):
            date_str = expense['date'].strftime('%d.%m.%Y')
            time_str = f" {expense['time'].strftime('%H:%M')}" if expense['time'] else ""
            text += (
                f"<b>#{i + (page-1)*EXPENSES_PER_PAGE}</b> | üÜî <code>{expense['id']}</code>\n"
                f"üìÖ <b>{date_str}{time_str}</b>\n"
                f"üè∑ {expense['category']}: <b>{expense['amount']:.2f} ‚ÇΩ</b>\n\n"
            )
        
        builder = InlineKeyboardBuilder()
        
        if page > 1:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expenses_page_{page-1}")
        if page < total_pages:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"expenses_page_{page+1}")
        
        builder.button(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2)
        
        await message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")
    

@expense_history_router.callback_query(F.data.startswith("expenses_page_")) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def paginate_expenses(call: CallbackQuery):
    page = int(call.data.split("_")[-1])
    await show_expenses_page(call.message, call.from_user.id, page)
    await call.answer()