
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery

from init import logging, ADMIN_ID
from db.db_main import get_pool

category_router = Router()

MAX_CUSTOM_CATEGORIES = 5  # –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

PREDEFINED_CATEGORIES = [
    "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ñ–∏–ª—å—ë", "–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ó–¥–æ—Ä–æ–≤—å–µ",
    "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", "–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "–î–æ–º/—Ä–µ–º–æ–Ω—Ç", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ü–æ–¥–∞—Ä–∫–∏ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã"
]

class ExpenseStates(StatesGroup):
    waiting_for_new_category = State()  # ‚Üê –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    waiting_for_edit_category = State()

#region –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def get_available_categories(user_id: int) -> list[str]:
    pool = get_pool()
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ user_categories
        user_custom = await conn.fetch(
            "SELECT category FROM user_categories WHERE user_id = $1",
            user_id
        )
        custom = [r['category'] for r in user_custom]

        if user_id == ADMIN_ID:
            # –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω–∞—á–∞–ª–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ, –ø–æ—Ç–æ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
            return custom + PREDEFINED_CATEGORIES
        else:
            # –£ –æ–±—ã—á–Ω—ã—Ö ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ
            return PREDEFINED_CATEGORIES + custom

async def get_user_categories(user_id: int) -> list[str]:
    pool = get_pool()
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ user_categories (–≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
        user_categories = await conn.fetch(
            "SELECT category FROM user_categories WHERE user_id = $1",
            user_id
        )
        # –ò –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö
        used_categories = await conn.fetch(
            "SELECT DISTINCT category FROM expenses WHERE user_id = $1",
            user_id
        )
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_categories = {row['category'] for row in user_categories} | {row['category'] for row in used_categories}
        return list(all_categories)
#endregion
#region –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@category_router.callback_query(F.data == "categories")
async def categories_menu(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_categories = await get_user_categories(call.from_user.id)
    predefined_categories = set(PREDEFINED_CATEGORIES)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
    custom_categories = [cat for cat in user_categories if cat not in predefined_categories]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
    text += "<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
    text += "\n".join(f"‚Ä¢ {cat}" for cat in PREDEFINED_CATEGORIES)
    
    if custom_categories:
        text += "\n\n<b>–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        text += "\n".join(f"‚Ä¢ {cat}" for cat in custom_categories)
    else:
        text += "\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    if custom_categories:
        builder.row(
            types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_category"),
            types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_category"),
            types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_category"),
            width=3
        )
    else:
        builder.row(
            types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_category"),
            width=1
        )
    
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings"),
        width=1
    )
    
    await call.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )
#endregion
#region –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@category_router.message(ExpenseStates.waiting_for_new_category)
async def save_new_category(message: types.Message, state: FSMContext):
    new_cat = message.text.strip().title()
    user_id = message.from_user.id

    if new_cat in PREDEFINED_CATEGORIES:
        await message.answer("‚ùå –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
        await state.clear()
        return

    pool = get_pool()
    async with pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        count_custom = await conn.fetchval(
            "SELECT COUNT(*) FROM user_categories WHERE user_id = $1",
            user_id
        )

        if user_id != ADMIN_ID and count_custom >= MAX_CUSTOM_CATEGORIES:
            await message.answer("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏–∑ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        exists = await conn.fetchval(
            "SELECT 1 FROM user_categories WHERE user_id = $1 AND LOWER(category) = LOWER($2)",
            user_id, new_cat
        )
        if exists:
            await message.answer("‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await state.clear()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ user_categories
        await conn.execute(
            "INSERT INTO user_categories (user_id, category) VALUES ($1, $2)",
            user_id, new_cat
        )
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã", callback_data="add_expense")
            ]
        ]
    )
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{new_cat}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë.", reply_markup=keyboard)
    await state.clear()

@category_router.callback_query(F.data == "add_category")
async def add_category_prompt(call: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    user_categories = await get_user_categories(call.from_user.id)
    predefined_categories = set(PREDEFINED_CATEGORIES)
    custom_categories = [cat for cat in user_categories if cat not in predefined_categories]
    
    if len(custom_categories) >= MAX_CUSTOM_CATEGORIES:
        await call.answer(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_CUSTOM_CATEGORIES} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="categories"),
        width=1
    )
    
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(ExpenseStates.waiting_for_new_category)
#endregion
#region –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@category_router.callback_query(F.data == "delete_category")
async def delete_category_menu(call: CallbackQuery):
    pool = get_pool()
    async with pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_categories = await conn.fetch(
            "SELECT category FROM user_categories WHERE user_id = $1",
            call.from_user.id
        )
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö
        used_categories = await conn.fetch(
            "SELECT DISTINCT category FROM expenses WHERE user_id = $1",
            call.from_user.id
        )
    
    custom_categories = [row['category'] for row in user_categories]
    used_categories_set = {row['category'] for row in used_categories}
    
    if not custom_categories:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    
    for category in custom_categories:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É "(–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å)", –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—Ö–æ–¥–∞—Ö
        suffix = " (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å)" if category not in used_categories_set else ""
        builder.row(
            types.InlineKeyboardButton(
                text=f"üóëÔ∏è {category}{suffix}",
                callback_data=f"confirm_delete:{category}"
            ),
            width=1
        )
    
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="categories"),
        width=1
    )
    
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–µ—Ç–∫–æ–π '(–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å)' –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π.",
        reply_markup=builder.as_markup()
    )

@category_router.callback_query(F.data.startswith("confirm_delete:"))
async def confirm_delete_category(call: CallbackQuery):
    category = call.data.split(":")[1]
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"do_delete:{category}"
        ),
        types.InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
            callback_data="delete_category"
        ),
        width=2
    )
    
    await call.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>?\n"
        "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π —Ä–∞—Å—Ö–æ–¥—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '–î—Ä—É–≥–æ–µ'.",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@category_router.callback_query(F.data.startswith("do_delete:"))
async def execute_delete_category(call: CallbackQuery):
    category = call.data.split(":")[1]
    user_id = call.from_user.id
    
    pool = get_pool()
    async with pool.acquire() as conn:
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö
        await conn.execute(
            "DELETE FROM user_categories WHERE user_id = $1 AND category = $2",
            user_id, category
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–∞ "–î—Ä—É–≥–æ–µ"
        await conn.execute(
            "UPDATE expenses SET category = '–î—Ä—É–≥–æ–µ' WHERE user_id = $1 AND category = $2",
            user_id, category
        )
    
    await call.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    await categories_menu(call, None)
#endregion
#region –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@category_router.callback_query(F.data == "edit_category")
async def edit_category_menu(call: CallbackQuery):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ delete_category_menu, –Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_categories = await get_user_categories(call.from_user.id)
    predefined_categories = set(PREDEFINED_CATEGORIES)
    custom_categories = [cat for cat in user_categories if cat not in predefined_categories]
    
    if not custom_categories:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", show_alert=True)
        return
    
    builder = InlineKeyboardBuilder()
    
    for category in custom_categories:
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚úèÔ∏è {category}",
                callback_data=f"edit_select:{category}"
            ),
            width=1
        )
    
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="categories"),
        width=1
    )
    
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@category_router.callback_query(F.data.startswith("edit_select:"))
async def edit_category_prompt(call: CallbackQuery, state: FSMContext):
    old_category = call.data.split(":")[1]
    await state.update_data(old_category=old_category)
    
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_category"),
        width=1
    )
    
    await call.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{old_category}</b>:",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(ExpenseStates.waiting_for_edit_category)
#endregion
#region –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@category_router.message(ExpenseStates.waiting_for_edit_category)
async def save_edited_category(message: types.Message, state: FSMContext):
    new_category = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    old_category = data.get("old_category")
    
    if not new_category:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    if new_category in PREDEFINED_CATEGORIES:
        await message.answer("‚ùå –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        await state.clear()
        return
    
    pool = get_pool()
    async with pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        exists = await conn.fetchval(
            "SELECT 1 FROM user_categories WHERE user_id = $1 AND LOWER(category) = LOWER($2)",
            user_id, new_category
        )
        if exists:
            await message.answer("‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ user_categories
        await conn.execute(
            "UPDATE user_categories SET category = $1 WHERE user_id = $2 AND category = $3",
            new_category, user_id, old_category
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ expenses
        await conn.execute(
            "UPDATE expenses SET category = $1 WHERE user_id = $2 AND category = $3",
            new_category, user_id, old_category
        )
    
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ¬´{old_category}¬ª –Ω–∞ ¬´{new_category}¬ª")
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_category"),
        types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_category"),
        types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_category"),
        width=3
    )
    builder.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings"),
        width=1
    )
    
    await message.answer(
        "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )
