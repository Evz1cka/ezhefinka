
import matplotlib.pyplot as plt
from matplotlib import rcParams
import io
from aiogram.types import InputMediaPhoto, InputFile, CallbackQuery

from aiogram.exceptions import TelegramAPIError
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from datetime import  date, timedelta, datetime

from init import logging, ADMIN_ID
from db.db_main import get_pool

stats_router = Router()

class StatsState(StatesGroup):
    choosing_period = State()
    choosing_type = State()
    custom_period_input = State()
    
def get_stat_type_keyboard():
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="–û–±—ã—á–Ω–∞—è", callback_data="stat_type_regular"),
        InlineKeyboardButton(text="–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="stat_type_categories")
    )
    kb.row(
        InlineKeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫", callback_data="stat_type_graph"),
        InlineKeyboardButton(text="üèÜ –¢–æ–ø", callback_data="stat_type_top")
    )
    kb.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_stats_menu")
    )
    return kb.as_markup()

@stats_router.callback_query(F.data == "period_custom")
async def ask_custom_period(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥</code>\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025 - 22.05.2025",
        parse_mode=ParseMode.HTML,
        reply_markup=back_button("show_stats_menu").as_markup()
    )
    await state.set_state(StatsState.custom_period_input)
    await call.answer()

@stats_router.message(StatsState.custom_period_input)
async def process_custom_period(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        start_str, end_str = map(str.strip, text.split("-"))
        start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
        end_date = datetime.strptime(end_str, "%d.%m.%Y").date()
        if start_date > end_date:
            raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π.")
    except Exception:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –¥–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025 - 22.05.2025",
            parse_mode=ParseMode.HTML
        )
        return

    await state.update_data(custom_period=(start_date, end_date), period="period_custom")
    await state.set_state(StatsState.choosing_type)

    await message.answer(
        f"‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_stat_type_keyboard()
    )



def get_period_filter(period_key: str, current_date: date, user_id: int, custom_period=None):
    if period_key == "period_today":
        return {
            "condition": "date = $2::date",
            "params": [user_id, current_date],
            "title_suffix": "—Å–µ–≥–æ–¥–Ω—è",
            "period_info": current_date.strftime('%d.%m.%Y')
        }
    elif period_key == "period_week":
        week_start = current_date - timedelta(days=6)
        return {
            "condition": "date BETWEEN $2 AND $3",
            "params": [user_id, week_start, current_date],
            "title_suffix": "–Ω–µ–¥–µ–ª—è",
            "period_info": f"{week_start.strftime('%d.%m.%Y')} - {current_date.strftime('%d.%m.%Y')}"
        }
    elif period_key == "period_month":
        month_start = current_date.replace(day=1)
        return {
            "condition": "date BETWEEN $2 AND $3",
            "params": [user_id, month_start, current_date],
            "title_suffix": "–º–µ—Å—è—Ü",
            "period_info": f"{month_start.strftime('%d.%m.%Y')} - {current_date.strftime('%d.%m.%Y')}"
        }
    elif period_key == "period_all":
        return {
            "condition": "TRUE",
            "params": [user_id],
            "title_suffix": "–≤—Å—ë –≤—Ä–µ–º—è",
            "period_info": "–∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"
        }
    elif period_key == "period_custom":
        if custom_period is None:
            raise ValueError("–î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞—Ç—ã")
        start_date, end_date = custom_period
        return {
            "condition": "date BETWEEN $2 AND $3",
            "params": [user_id, start_date, end_date],
            "title_suffix": f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}",
            "period_info": f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
        }
    else:
        raise ValueError(f"Unknown period key: {period_key}")

async def get_period_info_for_state(state: FSMContext, current_date: date, user_id: int):
    data = await state.get_data()
    period_key = data.get("period")
    custom_period = data.get("custom_period")

    if period_key == "period_custom" and custom_period is None:
        raise ValueError("–î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–Ω–æ–≤–æ.")

    return get_period_filter(period_key, current_date, user_id, custom_period=custom_period)


def back_button(callback: str = "show_stats_menu"):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback))
    return builder

@stats_router.callback_query(F.data == "show_stats_menu")
async def show_stats_menu(call: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
        InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="period_month"),
        InlineKeyboardButton(text="üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="period_all")
    )
    keyboard.row(
        InlineKeyboardButton(text="üìÖ –°–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="period_custom"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )

    markup = keyboard.as_markup()
    text = "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>"

    try:
        await call.message.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=markup)
    except TelegramAPIError:
        try:
            await call.message.delete()
        except TelegramAPIError:
            pass  
        await call.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=markup)
        
@stats_router.callback_query(F.data == "stat_type_categories")
async def show_stats_by_categories(call: CallbackQuery, state: FSMContext):
    pool = get_pool()
    if not pool:
        logging.error("‚ùå –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    db_now = await pool.fetchval("SELECT NOW()")
    current_date = db_now.date()

    try:
        period_info = await get_period_info_for_state(state, current_date, call.from_user.id)
    except ValueError as e:
        await call.message.answer(str(e))
        return


    date_condition = period_info["condition"]
    params = period_info["params"]
    title = f"üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ({period_info['title_suffix']})"

    try:
        query = f"""
            SELECT category, COUNT(*) as count, SUM(amount) as total
            FROM expenses
            WHERE user_id = $1 AND {date_condition}
            GROUP BY category
            ORDER BY total DESC
        """
        records = await pool.fetch(query, *params)

        if not records:
            text = f"{title}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        else:
            lines = [f"{i+1}. {r['category']} ‚Äî {r['count']} —à—Ç., {r['total']:.2f} ‚ÇΩ"
                     for i, r in enumerate(records)]
            text = f"{title}\n\n" + "\n".join(lines)

        await call.message.edit_text(text, reply_markup=back_button().as_markup())
        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}", exc_info=True)
        await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        await call.answer()

@stats_router.callback_query(F.data == "stat_type_graph")
async def show_stats_graph_for_period(call: CallbackQuery, state: FSMContext):
    pool = get_pool()
    if not pool:
        logging.error("‚ùå –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    data = await state.get_data()
    period_key = data.get("period")
    custom_period = data.get("custom_period")  # –í–∞–∂–Ω–æ

    if not period_key:
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥.")
        return

    db_now = await pool.fetchval("SELECT NOW()")
    current_date = db_now.date()

    try:
        period_info = get_period_filter(period_key, current_date, call.from_user.id, custom_period=custom_period)
    except ValueError as e:
        await call.message.answer(str(e))
        return

    date_condition = period_info["condition"]
    params = period_info["params"]
    title = f"üìà –î–∏–∞–≥—Ä–∞–º–º–∞ ({period_info['title_suffix']})"

    try:
        stats = await pool.fetch(
            f"""
            SELECT category, SUM(amount) as total
            FROM expenses
            WHERE user_id = $1 AND {date_condition}
            GROUP BY category
            ORDER BY total DESC
            """,
            *params
        )

        if not stats:
            await call.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
            return

        categories = [row["category"] for row in stats]
        amounts = [float(row["total"]) for row in stats]
        total_sum = sum(amounts)

        labels = [
            f"{cat} ‚Äî {amount:.2f} ‚ÇΩ ({(amount/total_sum)*100:.1f}%)"
            for cat, amount in zip(categories, amounts)
        ]

        rcParams.update({'font.size': 12, 'font.weight': 'bold'})
        plt.figure(figsize=(8, 8))
        plt.gca().set_facecolor('#f0f0f0')

        wedges, texts, autotexts = plt.pie(
            amounts,
            labels=labels,
            startangle=140,
            autopct=lambda pct: f"{pct:.1f}%" if pct > 3 else "",
            colors=plt.cm.Paired.colors,
            wedgeprops={"edgecolor": "white"}
        )

        for text in texts + autotexts:
            text.set_fontsize(10)
            text.set_fontweight('bold')

        plt.title(title, fontsize=14, fontweight='bold')
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        plt.close()

        media = InputMediaPhoto(media=InputFile(buf, filename="stats_graph.png"), caption=title, parse_mode=ParseMode.HTML)

        await call.message.edit_media(media=media, reply_markup=back_button().as_markup())

        buf.close()
        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}", exc_info=True)
        await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        await call.answer()

@stats_router.callback_query(F.data.in_({"period_today", "period_week", "period_month", "period_all"}))
async def handle_stats_period(call: CallbackQuery, state: FSMContext):
    period_key = call.data
    await state.update_data(period=period_key)
    await state.set_state(StatsState.choosing_type)

    await call.message.edit_text(
        "üìà <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_stat_type_keyboard()
    )
    await call.answer()

@stats_router.message(Command("user_stats"))
async def user_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        logging.warning(
            f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /user_stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {message.from_user.id}, username: @{message.from_user.username}"
        )
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    logging.info(
        f"‚úÖ –ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (/user_stats)"
    )

    db_pool = get_pool()
    try:
        stats = await db_pool.fetch(
            """
            SELECT u.user_id, u.username, COUNT(e.id) AS expenses_count,
                   SUM(e.amount) AS total_amount, MAX(u.last_active) AS last_active
            FROM users u
            LEFT JOIN expenses e ON u.user_id = e.user_id
            GROUP BY u.user_id
            ORDER BY last_active DESC
            """
        )

        if not stats:
            return await message.answer("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")

        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for row in stats:
            username_display = f"@{row['username']}" if row['username'] else f"ID: {row['user_id']}"
            last_active = row['last_active'].strftime('%d.%m.%Y %H:%M') if row['last_active'] else "‚Äî"
            total_amount = row['total_amount'] or 0.00

            text += (
                f"üë§ {username_display}\n"
                f"‚îú –†–∞—Å—Ö–æ–¥–æ–≤: {row['expenses_count']}\n"
                f"‚îú –°—É–º–º–∞: {total_amount:.2f} ‚ÇΩ\n"
                f"‚ï∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"
            )

        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@stats_router.callback_query(F.data == "stat_type_regular")
async def show_regular_stats(call: CallbackQuery, state: FSMContext):
    pool = get_pool()
    if not pool:
        logging.error("‚ùå –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    data = await state.get_data()
    period_key = data.get("period")

    if not period_key:
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥.")
        return

    db_now = await pool.fetchval("SELECT NOW()")
    current_date = db_now.date()

    period_info = await get_period_info_for_state(state, current_date, call.from_user.id)

    date_condition = period_info["condition"]
    params = period_info["params"]
    title = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_info['title_suffix']}"
    period_text = period_info["period_info"]

    try:
        total = await pool.fetchval(
            f"SELECT COALESCE(SUM(amount), 0) FROM expenses "
            f"WHERE user_id = $1 AND {date_condition}",
            *params
        )
        stats = await pool.fetch(
            f"SELECT category, COALESCE(SUM(amount), 0) as sum FROM expenses "
            f"WHERE user_id = $1 AND {date_condition} "
            f"GROUP BY category ORDER BY sum DESC",
            *params
        )

        response = (
            f"{title}\n"
            f"–ü–µ—Ä–∏–æ–¥: {period_text}\n"
            f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {float(total):.2f} ‚ÇΩ\n\n"
        )
        if stats:
            for i, row in enumerate(stats, 1):
                response += f"{i}. {row['category']}: {row['sum']:.2f} ‚ÇΩ\n"
        else:
            response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"

        await call.message.edit_text(response, reply_markup=back_button().as_markup())
        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        await call.answer()
