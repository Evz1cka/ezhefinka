import os
import matplotlib.pyplot as plt
from matplotlib import rcParams
import io
import tempfile

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardRemove,

)
import asyncpg
from datetime import datetime, date, time, timedelta

from init import logging, ADMIN_ID
from db.db_main import get_pool

stats_router = Router()

@stats_router.callback_query(F.data == "show_stats_menu")
async def show_stats_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="stats_period"),
        types.InlineKeyboardButton(text="üè∑ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="stats_categories")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫", callback_data="stats_graphs"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    try:
        await call.message.edit_text(
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=builder.as_markup()
        )
    except Exception:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await call.message.delete()
        except Exception:
            pass  # –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await call.message.answer(
            "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
            parse_mode=ParseMode.HTML,
            reply_markup=builder.as_markup()
        )

@stats_router.callback_query(F.data == "stats_categories")
async def show_stats_categories(callback: CallbackQuery):
    pool = get_pool()
    if not pool:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! pool=None")
        return

    user_id = callback.from_user.id

    try:
        stats = await pool.fetch(
            """
            SELECT category, COALESCE(SUM(amount), 0) as sum
            FROM expenses
            WHERE user_id = $1
            GROUP BY category
            ORDER BY sum DESC
            """,
            user_id
        )

        if not stats:
            text = "‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."
        else:
            text = "üè∑ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤—Å–µ –≤—Ä–µ–º—è):</b>\n\n"
            for i, row in enumerate(stats, 1):
                text += f"{i}. {row['category']}: {row['sum']:.2f} ‚ÇΩ\n"

        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_stats_menu")
        )
        await callback.message.edit_text(
            text, parse_mode="HTML", reply_markup=builder.as_markup()
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
        await callback.answer()

@stats_router.callback_query(F.data == "stats_graphs")
async def show_stats_graph(call: CallbackQuery):
    import matplotlib.pyplot as plt
    from matplotlib import rcParams
    import io
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton

    pool = get_pool()
    if not pool:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! pool=None")
        return

    user_id = call.from_user.id

    try:
        stats = await pool.fetch(
            """
            SELECT category, SUM(amount) AS total
            FROM expenses
            WHERE user_id = $1
            GROUP BY category
            ORDER BY total DESC
            """,
            user_id
        )

        if not stats:
            await call.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", show_alert=True)
            return

        categories_raw = [row["category"] for row in stats]
        amounts = [float(row["total"]) for row in stats]
        total_sum = sum(amounts)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å —Å—É–º–º–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        categories = [
            f"{cat} ‚Äî {amount:.2f} ‚ÇΩ ({(amount/total_sum)*100:.1f}%)"
            for cat, amount in zip(categories_raw, amounts)
        ]

        rcParams.update({
            'font.size': 12,
            'font.weight': 'bold'
        })

        plt.figure(figsize=(8, 8))

        # –§–æ–Ω —Ñ–∏–≥—É—Ä—ã –∏ –æ—Å–µ–π
        plt.gcf().set_facecolor("#b3b3b3")  # —Ñ–æ–Ω –≤—Å–µ–π —Ñ–∏–≥—É—Ä—ã (—Å–µ—Ä—ã–π)
        plt.gca().set_facecolor('#f0f0f0')  # —Ñ–æ–Ω –æ–±–ª–∞—Å—Ç–∏ –æ—Å–µ–π (—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π)

        wedges, texts, autotexts = plt.pie(
            amounts,
            labels=categories,
            startangle=140,
            autopct=lambda pct: f"{pct:.1f}%" if pct > 3 else "",
            colors=plt.cm.Paired.colors,
            wedgeprops={"edgecolor": "white"}
        )

        for text in texts:
            text.set_fontsize(10)
            text.set_fontweight('bold')

        for autotext in autotexts:
            autotext.set_fontsize(10)
            autotext.set_fontweight('bold')

        plt.title("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å —Å—É–º–º–∞–º–∏ –∏ %)", fontsize=14, fontweight='bold')
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format="png", transparent=False)
        buf.seek(0)
        plt.close()

        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_stats_menu")
        )
        
        try:
            await call.message.delete()
        except Exception:
            pass  # –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

        await call.message.answer_photo(
            photo=types.BufferedInputFile(buf.read(), filename="stats.png"),
            caption="üìä –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –º–µ—Å—è—Ü",
            reply_markup=keyboard.as_markup()
        )
        await call.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}", exc_info=True)
        await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        await call.answer()


@stats_router.callback_query(F.data == "stats_period") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def show_stats(call: CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="–ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
        InlineKeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week")
    )
    keyboard.row(
        InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="period_month"),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="show_stats_menu")
    )
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard.as_markup()
    )
    

@stats_router.callback_query(F.data.in_({"period_today", "period_week", "period_month"}))
async def handle_stats_period(call: CallbackQuery):
    pool = get_pool()
    if not pool:
        logging.error("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! pool=None")
        return
    
    user_id = call.from_user.id
    period_key = call.data

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ –ë–î
    db_now = await pool.fetchval("SELECT NOW()")
    current_date = db_now.date()

    if period_key == "period_today":
        date_condition = "date = $2::date"
        params = [user_id, current_date]
        title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        period_info = f"{current_date.strftime('%d.%m.%Y')}"
    elif period_key == "period_week":
        week_start = current_date - timedelta(days=6)
        date_condition = "date BETWEEN $2 AND $3"
        params = [user_id, week_start, current_date]
        title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"
        period_info = f"{week_start.strftime('%d.%m.%Y')} - {current_date.strftime('%d.%m.%Y')}"
    else:  # period_month
        month_start = current_date.replace(day=1)
        date_condition = "date BETWEEN $2 AND $3"
        params = [user_id, month_start, current_date]
        title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"
        period_info = f"{month_start.strftime('%d.%m.%Y')} - {current_date.strftime('%d.%m.%Y')}"

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
    try:
        total = await pool.fetchval(
            f"SELECT COALESCE(SUM(amount), 0) FROM expenses "
            f"WHERE user_id = $1 AND {date_condition}",
            *params
        )
        stats = await pool.fetch(
            f"SELECT category, COALESCE(SUM(amount), 0) as sum FROM expenses "
            f"WHERE user_id = $1 AND {date_condition} "
            f"GROUP BY category ORDER BY sum DESC",
            *params
        )

        response = (
            f"{title}\n"
            f"–ü–µ—Ä–∏–æ–¥: {period_info}\n"
            f"–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {float(total):.2f} ‚ÇΩ\n\n"
        )
        if stats:
            for i, row in enumerate(stats, 1):
                response += f"{i}. {row['category']}: {row['sum']:.2f} ‚ÇΩ\n"
        else:
            response += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
        keyboard = InlineKeyboardBuilder()
        keyboard.add(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="stats_period"
            )
        )
        await call.message.edit_text(response, reply_markup=keyboard.as_markup() )
        await call.answer()  

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        await call.answer()

@stats_router.message(Command("user_stats"))
async def user_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        logging.warning(
            f"‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /user_stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {message.from_user.id}, username: @{message.from_user.username}"
        )
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

    logging.info(
        f"‚úÖ –ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (/user_stats)"
    )

    db_pool = get_pool()
    try:
        stats = await db_pool.fetch(
            """
            SELECT u.user_id, u.username, COUNT(e.id) AS expenses_count,
                   SUM(e.amount) AS total_amount, MAX(u.last_active) AS last_active
            FROM users u
            LEFT JOIN expenses e ON u.user_id = e.user_id
            GROUP BY u.user_id
            ORDER BY last_active DESC
            """
        )

        if not stats:
            return await message.answer("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")

        text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for row in stats:
            username_display = f"@{row['username']}" if row['username'] else f"ID: {row['user_id']}"
            last_active = row['last_active'].strftime('%d.%m.%Y %H:%M') if row['last_active'] else "‚Äî"
            total_amount = row['total_amount'] or 0.00

            text += (
                f"üë§ {username_display}\n"
                f"‚îú –†–∞—Å—Ö–æ–¥–æ–≤: {row['expenses_count']}\n"
                f"‚îú –°—É–º–º–∞: {total_amount:.2f} ‚ÇΩ\n"
                f"‚ï∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"
            )

        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
