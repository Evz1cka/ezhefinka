
import os
from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardRemove,

)
import asyncpg
from datetime import datetime, date, time, timedelta

from users.user import get_or_create_user

start_router = Router()


@start_router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    #await get_or_create_user(message.from_user) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="show_stats_menu"
        ),
        types.InlineKeyboardButton(
            text="üìù –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤",
            callback_data="expenses_history"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥",
            callback_data="add_expense"
            
        ),
        types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data="delete_expense"
        )
        )
    builder.row(
        types.InlineKeyboardButton(
            text="üë§ –ü—Ä–æ—Ñ–∏–ª—å",
            callback_data="profile"
            
        ),
        types.InlineKeyboardButton(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="settings"
            
        )
        )
    builder.row(
        types.InlineKeyboardButton(
            text="‚ÑπÔ∏è –ü–æ–º–æ—â—å",
            callback_data="show_help"
        )
        )
    text=(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ï–∂–µ—Ñ–∏–Ω–∫–∞ üçá</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    try:
        await message.edit_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        await message.answer(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=builder.as_markup()
        )
    

@start_router.callback_query(F.data == "show_help")
async def show_help(call: CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>\n"
        "–§–æ—Ä–º–∞—Ç: <code>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –°—É–º–º–∞ [–î–∞—Ç–∞] [–í—Ä–µ–º—è]</code>\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "<code>–¢–∞–∫—Å–∏ 350</code>\n"
        "<code>–ï–¥–∞ 500 15.07</code>\n"
        "<code>–ö–∏–Ω–æ 800 15.07 20:30</code>\n\n"
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
        "<b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await call.message.edit_text(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@start_router.callback_query(F.data == "settings")
async def settings_menu(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders"),
        types.InlineKeyboardButton(text="üí∞ –ë—é–¥–∂–µ—Ç—ã", callback_data="budgets")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    await call.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@start_router.callback_query(F.data == "main_menu")
async def back_to_main_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.edit_text()
    except:
        pass
    await start(call.message, state)
    await call.answer()