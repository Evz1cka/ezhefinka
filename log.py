# region –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

# üìå –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import html
import logging
import asyncio
from datetime import datetime, timedelta
from tempfile import NamedTemporaryFile
import json
# üìå –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import aiogram.exceptions
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)

# üìå –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from init import ADMIN_ID

# endregion

# –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ä—Ç –∑–∞–ø—É—Å–∫–∞ (–Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ!)

logs_router = Router()

CONFIG_FILE = "config.json"
LOG_PATH = "bot.log"
CLEAN_INTERVAL_DAYS = 7
# –•—Ä–∞–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"ai_assistant_enabled": True, "send_media_alerts": False} 

def save_config(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON-—Ñ–∞–π–ª."""
    with open(CONFIG_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

def get_last_cleanup_time() -> datetime:
    config = load_config()
    time_str = config.get("last_cleanup_time")
    if time_str:
        try:
            return datetime.fromisoformat(time_str)
        except ValueError:
            logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ last_cleanup_time, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ.")
    return datetime.now()

def set_last_cleanup_time(dt: datetime):
    config = load_config()
    config["last_cleanup_time"] = dt.isoformat()
    save_config(config)
    
config = load_config()

def init_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if logger.hasHandlers():
        logger.handlers.clear()

    # üîπ –§–∞–π–ª –ª–æ–≥–æ–≤
    file_handler = logging.FileHandler(LOG_PATH, encoding="utf-8")
    formatter = logging.Formatter(
        fmt="%(asctime)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d | %H:%M:%S"  # ‚¨ÖÔ∏è –í–æ—Ç –∑–¥–µ—Å—å —É–±—Ä–∞–Ω—ã –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        )
    file_handler.setFormatter(formatter)


    # üîπ –ö–æ–Ω—Å–æ–ª—å (—Ç–µ—Ä–º–∏–Ω–∞–ª)
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter("%(levelname)s - %(message)s"))

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    return logger

async def start_log_cleanup_cycle():
    start_time = datetime.now()
    notified = False  # –ë—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

    while True:
        now = datetime.now()
        time_passed = now - start_time
        time_until_clean = timedelta(days=CLEAN_INTERVAL_DAYS) - time_passed

        # üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        if not notified and time_until_clean <= timedelta(days=1):
            '''
            await message.answer(
                f"üì¢ –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –ª–æ–≥-—Ñ–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω!\n"
                f"üïì –í—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏: {start_time + timedelta(days=7):%Y-%m-%d %H:%M}"
            )
            notified = True
            '''
        # üßπ –û—á–∏—Å—Ç–∫–∞, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 7 –¥–Ω–µ–π
        if time_passed >= timedelta(days=CLEAN_INTERVAL_DAYS):
            if os.path.exists(LOG_PATH):
                with open(LOG_PATH, "w", encoding="utf-8") as f:
                    f.write("")
                logging.info("üßπ –õ–æ–≥-—Ñ–∞–π–ª –æ—á–∏—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                #await message.answer("üßπ –õ–æ–≥-—Ñ–∞–π–ª –æ—á–∏—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            
           # üîÅ –°–±—Ä–æ—Å –æ—Ç—Å—á—ë—Ç–∞
            start_time = datetime.now()
            set_last_cleanup_time(start_time)
            notified = False

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ —á–∞—Å (–º–æ–∂–Ω–æ —á–∞—â–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å)

def get_last_log_lines(n: int = 100) -> list[str] | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(LOG_PATH):
        logging.warning("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    try:
        with open(LOG_PATH, "r", encoding="utf-8", errors="ignore") as f:
            all_lines = f.readlines()
        return all_lines[-n:]
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:")
        return None

@logs_router.message(Command("logs"))
@logs_router.callback_query(F.data == "logs")
async def send_logs(event: types.Message | CallbackQuery):
    user = event.from_user if isinstance(event, CallbackQuery) else event.from_user
    if user.id != ADMIN_ID:
        if isinstance(event, CallbackQuery):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º.", show_alert=True)
        else:
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º.")
        return

    message = event.message if isinstance(event, CallbackQuery) else event
    args = message.text.split() if message.text else []
    lines = int(args[1]) if len(args) > 1 and args[1].isdigit() else 100

    tail = get_last_log_lines(lines)
    if tail is None:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª.")
        return

    with NamedTemporaryFile("w+", delete=False, suffix=".log", encoding="utf-8") as temp_file:
        temp_file.writelines(tail)
        temp_path = temp_file.name

    await message.answer_document(
        FSInputFile(temp_path),
        caption=(
            f"üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /logs [–∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫]."
        ),
        parse_mode=None,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÑ –í—ã–≤–µ—Å—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="logs_as_text")]
        ])
    )
    os.remove(temp_path)

@logs_router.callback_query(F.data == "logs_as_text")
async def send_logs_as_text(call: CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    log_file_path = "bot.log"
    if not os.path.exists(log_file_path):
        await call.message.edit_text("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    tail = get_last_log_lines(100)
    if tail is None:
        await call.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª.")
        return


    log_text = "".join(tail).strip()
    if len(log_text) > 4000:
        log_text = "[...]\n" + log_text[-4000:]  # –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤

    escaped = html.escape(log_text)

    try:
        await call.message.edit_text(
            f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n<pre>{escaped}</pre>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", callback_data="logs_as_text")]
            ])
        )
    except aiogram.exceptions.TelegramBadRequest:
        # –µ—Å–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(
            f"üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n<pre>{escaped}</pre>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", callback_data="logs_as_text")]
            ])
        )

    await call.answer("‚úÖ –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

@logs_router.message(Command("clearlog"))
@logs_router.callback_query(F.data == "clearlog")
async def clear_logs(event: types.Message | CallbackQuery):
    user = event.from_user if isinstance(event, CallbackQuery) else event.from_user
    if user.id != ADMIN_ID:
        if isinstance(event, CallbackQuery):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        else:
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    message = event.message if isinstance(event, CallbackQuery) else event

    now = datetime.now()
    last_cleanup_time = get_last_cleanup_time()
    next_cleanup_time = last_cleanup_time + timedelta(days=CLEAN_INTERVAL_DAYS)

    remaining = next_cleanup_time - now

    hours, remainder = divmod(int(remaining.total_seconds()), 3600)
    minutes = remainder // 60

    warn_text = (
        f"üßπ –î–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: "
        f"<b>{hours} —á {minutes} –º–∏–Ω</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –≤—Ä—É—á–Ω—É—é —Å–µ–π—á–∞—Å?"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—á–∏—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="confirm_clearlog")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clearlog")]
    ])

    await message.answer(warn_text, reply_markup=keyboard, parse_mode="HTML")

@logs_router.callback_query(lambda c: c.data == "confirm_clearlog")
async def confirm_clearlog(call: CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    log_file = "bot.log"
    if os.path.exists(log_file):
        with open(log_file, "w", encoding="utf-8") as f:
            f.write("")
        await call.message.edit_text("üßπ –õ–æ–≥-—Ñ–∞–π–ª –±—ã–ª –æ—á–∏—â–µ–Ω –≤—Ä—É—á–Ω—É—é!")
    else:
        await call.message.edit_text("‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@logs_router.callback_query(lambda c: c.data == "cancel_clearlog")
async def cancel_clearlog(call: CallbackQuery):
    await call.message.edit_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")